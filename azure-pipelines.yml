# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(MajorVersion).$(MinorVersion).$(Date:yyMM).$(Date:dd)$(Rev:rrr)

trigger:
  branches:
    include:
    - master
    - mmcintyr/*

pool:
  vmImage: windows-latest

steps:
- task: PowerShell@2
  displayName: Construct the build number
  inputs:
    targetType: 'inline'
    script: |
      $Major = $(MajorVersion)
      $Minor = $(MinorVersion)
      $Build = [int](Get-Date -format "yyMM")
      $Revision = "{0:d2}{1:d4}" -f [int](Get-Date -format "dd"), [int]($env:BUILD_BUILDNUMBER.Split('.')[1])
      $BuildNumber = "{0}.{1}.{2:d2}.{3}" -f $Major, $Minor, $Build, $Revision

      Write-Host "##vso[task.setvariable variable=BUILD_BUILDNUMBER]$BuildNumber"
- task: PowerShell@2
  displayName: What kind of build is it?
  inputs:
    targetType: 'inline'
    script: |
      $alias = $env:BUILD_REQUESTEDFOREMAIL.Split('@')[0]
      $buildPrefix = '{0}_{1}' -f $alias, $env:BUILD_SOURCEBRANCHNAME
      $BuildProduct = 'SfBServer'

      Write-Host "##vso[task.setvariable variable=BUILD_PREFIX]$buildPrefix"
      Write-Host "##vso[task.setvariable variable=BUILD_PRODUCT]$BuildProduct"
- task: PowerShell@2
  displayName: Display the build variables that are available
  inputs:
   targetType: 'inline'
   script: |
     Get-ChildItem env:
- task: PowerShell@2
  displayName: Stamp support ownership on all files
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/StampOwners.ps1'
    arguments: "-OwnerName 'On Premise Diagnostic for SfBServer Support' -OwnerEmail 'pop-sfbsupport@microsoft.com' -Product $env:BUILD_PRODUCT"
- task: PowerShell@2
  displayName: Stamp version
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/ApplyVersionToConsole.ps1'
- task: PowerShell@2
  displayName: Stamp application insight key
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/SetApplicationInsightKey.ps1'
    arguments: '-Stage Development'
- task: PowerShell@2
  displayName: Stamp the product/ruleset version
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/Set-ProductMode.ps1'
    arguments: '-Product $env:BUILD_PRODUCT'
- task: PowerShell@2
  displayName: Set the product title
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/Set-Title.ps1'
    arguments: '-Product $env:BUILD_PRODUCT'
- task: PowerShell@2
  displayName: Set the GitHub repo
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/Set-GitHubRepo.ps1'
    arguments: '-Product $env:BUILD_PRODUCT'
- task: PowerShell@2
  displayName: Run Script Analyzer
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/Invoke-ScriptAnalyzer.ps1'
    arguments: '-SourceDirectory $(Build.SourcesDirectory) -Product $env:BUILD_PRODUCT'
- task: PowerShell@2
  displayName: Run the Pester tests (English)
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/Invoke-TestCases.ps1'
    arguments: "-SourceDirectory $(Build.SourcesDirectory) -Product $env:BUILD_PRODUCT -Languages 'English'"
- task: PowerShell@2
  displayName: Build nuget package
  inputs:
    filePath: '$(Build.SourcesDirectory)/buildhelpers/Create-NuGetPackage.ps1'
    arguments: "-Version $(Build.BuildNumber)"
- task: PublishTestResults@2
  displayName: Publish Test Results
  inputs:
    testRunner: NUnit
    failTaskOnFailedTests: true

- task: PowerShell@2
  displayName: Remove any non-product files
  inputs:
    targetType: inline
    filePath: $(Build.SourcesDirectory)\buildhelpers\GenerateBITables.ps1
    arguments: -SourceDirectory $(Build.SourcesDirectory) -Product $env:BUILD_PRODUCT
    script: |
      Write-Host "Removing non-product files..."
      foreach($folder in (Get-ChildItem -Path $(Build.SourcesDirectory)\src\mode -Directory))
      {
          Write-Host "Checking [$($folder.name)] against [$env:BUILD_PRODUCT]"
          if ($folder.Name -ne $env:BUILD_PRODUCT)
          {
              Write-Host "Removing [$($folder.FullName)]"
              Remove-Item -Recurse -Path $folder.FullName -Force
          }
      }
- task: PowerShell@2
  displayName: Remove documentation files (not part of release)
  inputs:
   targetType: 'inline'
   script: |
      Write-Host "Removing online documentation files..."
      Remove-Item -Recurse -Path $(Build.SourcesDirectory)\src\mode\$env:BUILD_PRODUCT\docs -Force
      Remove-Item -Recurse -Path $(Build.SourcesDirectory)\src\mode\$env:BUILD_PRODUCT\BuildArtifacts -Force
- task: PublishBuildArtifacts@1
  displayName: Publish Script Analyzer results
  inputs:
    PathtoPublish: $(System.DefaultWorkingDirectory)/PSSA-output.txt
    ArtifactName: ScriptAnalyzerOutput
- task: PublishBuildArtifacts@1
  displayName: Create build drop
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/src
    ArtifactName: $(System.TeamProject)-$(Build.BuildNumber)
- task: PublishBuildArtifacts@1
  displayName: Create buildhelpers drop
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/buildhelpers
    ArtifactName: $(System.TeamProject)-$(Build.BuildNumber)-BuildHelpers
- task: PublishBuildArtifacts@1
  displayName: Create nuget package drop
  inputs:
    PathtoPublish: $(System.DefaultWorkingDirectory)/OPDCore.$(Build.BuildNumber).nupkg
    ArtifactName:  OPDCore.$(Build.BuildNumber).nupkg
